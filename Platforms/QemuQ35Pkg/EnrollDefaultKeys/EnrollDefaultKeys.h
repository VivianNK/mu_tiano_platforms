/** @file
  Type definitions and object declarations for the EnrollDefaultKeys
  application.

  Copyright (C) 2014-2019, Red Hat, Inc.

  SPDX-License-Identifier: BSD-2-Clause-Patent
**/

#ifndef ENROLL_DEFAULT_KEYS_H_
#define ENROLL_DEFAULT_KEYS_H_

#include <Uefi/UefiBaseType.h>
#include <Guid/ImageAuthentication.h> // MU_CHANGE EFI_CERT_VERSION_RECORD

//
// Convenience structure types for constructing "signature lists" for
// authenticated UEFI variables.
//
// The most important thing about the variable payload is that it is a list of
// lists, where the element size of any given *inner* list is constant.
//
// Since X509 certificates vary in size, each of our *inner* lists will contain
// one element only (one X.509 certificate). This is explicitly mentioned in
// the UEFI specification, in "28.4.1 Signature Database", in a Note.
//
// The list structure looks as follows:
//
// struct EFI_VARIABLE_AUTHENTICATION_2 {                           |
//   struct EFI_TIME {                                              |
//     UINT16 Year;                                                 |
//     UINT8  Month;                                                |
//     UINT8  Day;                                                  |
//     UINT8  Hour;                                                 |
//     UINT8  Minute;                                               |
//     UINT8  Second;                                               |
//     UINT8  Pad1;                                                 |
//     UINT32 Nanosecond;                                           |
//     INT16  TimeZone;                                             |
//     UINT8  Daylight;                                             |
//     UINT8  Pad2;                                                 |
//   } TimeStamp;                                                   |
//                                                                  |
//   struct WIN_CERTIFICATE_UEFI_GUID {                           | |
//     struct WIN_CERTIFICATE {                                   | |
//       UINT32 dwLength; ----------------------------------------+ |
//       UINT16 wRevision;                                        | |
//       UINT16 wCertificateType;                                 | |
//     } Hdr;                                                     | +- DataSize
//                                                                | |
//     EFI_GUID CertType;                                         | |
//     UINT8    CertData[1] = { <--- "struct hack"                | |
//       struct EFI_SIGNATURE_LIST {                            | | |
//         EFI_GUID SignatureType;                              | | |
//         UINT32   SignatureListSize; -------------------------+ | |
//         UINT32   SignatureHeaderSize;                        | | |
//         UINT32   SignatureSize; ---------------------------+ | | |
//         UINT8    SignatureHeader[SignatureHeaderSize];     | | | |
//                                                            v | | |
//         struct EFI_SIGNATURE_DATA {                        | | | |
//           EFI_GUID SignatureOwner;                         | | | |
//           UINT8    SignatureData[1] = { <--- "struct hack" | | | |
//             X.509 payload                                  | | | |
//           }                                                | | | |
//         } Signatures[];                                      | | |
//       } SigLists[];                                            | |
//     };                                                         | |
//   } AuthInfo;                                                  | |
// };                                                               |
//
// Given that the "struct hack" invokes undefined behavior (which is why C99
// introduced the flexible array member), and because subtracting those pesky
// sizes of 1 is annoying, and because the format is fully specified in the
// UEFI specification, we'll introduce two matching convenience structures that
// are customized for our X.509 purposes.
//
#pragma pack (1)
typedef struct {
  EFI_TIME TimeStamp;

  //
  // dwLength covers data below
  //
  UINT32   dwLength;
  UINT16   wRevision;
  UINT16   wCertificateType;
  EFI_GUID CertType;
} SINGLE_HEADER;

typedef struct {
  //
  // SignatureListSize covers data below
  //
  EFI_GUID SignatureType;
  UINT32   SignatureListSize;
  UINT32   SignatureHeaderSize; // constant 0
  UINT32   SignatureSize;

  //
  // SignatureSize covers data below
  //
  EFI_GUID SignatureOwner;

  //
  // X.509 certificate follows
  //
} REPEATING_HEADER;

// MU_CHANGE START
//
// String constants for test VERSION_RECORD_CERT
//
#define TEST_RULE_COMPANY_NAME_STR        L"Microsoft Corporation"
#define TEST_RULE_COMPANY_NAME_LEN        (sizeof (TEST_RULE_COMPANY_NAME_STR) / sizeof (CHAR16))
#define TEST_RULE_ORIGINAL_FILENAME_STR   L"cdboot.efi"
#define TEST_RULE_ORIGINAL_FILENAME_LEN   (sizeof (TEST_RULE_ORIGINAL_FILENAME_STR) / sizeof (CHAR16))
#define TEST_RULE_PADDING                 6

//
// Struct for an example VERSION_RECORD_CERT for cdboot app
//
typedef struct {
  EFI_CERT_VERSION_RECORD   header;
  CHAR16                    CompanyName[TEST_RULE_COMPANY_NAME_LEN];
  CHAR16                    OriginalFilename[TEST_RULE_ORIGINAL_FILENAME_LEN];
  UINT8                     Padding[TEST_RULE_PADDING];
} TEST_VERSION_RECORD_CERT;


// Version Record Cert GUIDs
// Each rule must have a unique GUID
//
extern EFI_GUID gTestCertGuid;
STATIC_ASSERT (ALIGN_VARIABLE( sizeof (TEST_VERSION_RECORD_CERT)) == sizeof (TEST_VERSION_RECORD_CERT), "TEST_VERSION_RECORD_CERT must be natively aligned.");


extern UINT8 dummy_cert[] = {
  0x30, 0x82, 0x05, 0x6B, 0x30, 0x82, 0x03, 0x53, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14, 0x5D, 
0x76, 0x20, 0xA0, 0xF1, 0x34, 0x01, 0xBA, 0xCE, 0xF6, 0x21, 0x80, 0xF9, 0x31, 0x06, 0x3F, 0xD8, 
0x55, 0x91, 0xF6, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 
0x05, 0x00, 0x30, 0x45, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 
0x55, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0C, 0x0A, 0x53, 0x6F, 0x6D, 0x65, 
0x2D, 0x53, 0x74, 0x61, 0x74, 0x65, 0x31, 0x21, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 
0x18, 0x49, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x74, 0x20, 0x57, 0x69, 0x64, 0x67, 0x69, 0x74, 
0x73, 0x20, 0x50, 0x74, 0x79, 0x20, 0x4C, 0x74, 0x64, 0x30, 0x1E, 0x17, 0x0D, 0x32, 0x30, 0x30, 
0x37, 0x33, 0x31, 0x32, 0x30, 0x33, 0x30, 0x33, 0x31, 0x5A, 0x17, 0x0D, 0x32, 0x32, 0x30, 0x37, 
0x33, 0x31, 0x32, 0x30, 0x33, 0x30, 0x33, 0x31, 0x5A, 0x30, 0x45, 0x31, 0x0B, 0x30, 0x09, 0x06, 
0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x55, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 
0x08, 0x0C, 0x0A, 0x53, 0x6F, 0x6D, 0x65, 0x2D, 0x53, 0x74, 0x61, 0x74, 0x65, 0x31, 0x21, 0x30, 
0x1F, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x18, 0x49, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x74, 
0x20, 0x57, 0x69, 0x64, 0x67, 0x69, 0x74, 0x73, 0x20, 0x50, 0x74, 0x79, 0x20, 0x4C, 0x74, 0x64, 
0x30, 0x82, 0x02, 0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 
0x01, 0x05, 0x00, 0x03, 0x82, 0x02, 0x0F, 0x00, 0x30, 0x82, 0x02, 0x0A, 0x02, 0x82, 0x02, 0x01, 
0x00, 0xC1, 0x29, 0x5A, 0xEF, 0x13, 0x78, 0x53, 0x70, 0x66, 0x43, 0xC6, 0xF5, 0x80, 0x43, 0xCA, 
0xB8, 0xD1, 0xED, 0xE8, 0x80, 0x81, 0x58, 0x23, 0x17, 0xA9, 0x37, 0x49, 0xCC, 0xA3, 0x15, 0xB1, 
0x0E, 0xE0, 0x79, 0x3C, 0xBF, 0xE3, 0x57, 0xA6, 0x67, 0x8D, 0x3C, 0x9E, 0x15, 0x84, 0xBB, 0x7C, 
0xB1, 0x38, 0xE9, 0xC6, 0xE6, 0x83, 0xF6, 0x8D, 0x0F, 0x1C, 0x27, 0xF7, 0xF8, 0x1D, 0x12, 0x93, 
0xB1, 0xD8, 0x68, 0x19, 0x41, 0xF2, 0xC1, 0xB4, 0x72, 0x1B, 0x32, 0xAA, 0xD4, 0x72, 0x04, 0xD6, 
0x22, 0xD7, 0x14, 0xBE, 0xCE, 0xEE, 0xAD, 0xB5, 0xB9, 0x02, 0x05, 0x3A, 0x0B, 0xBD, 0x8D, 0xC5, 
0xF9, 0xC1, 0x12, 0x9C, 0x55, 0x1E, 0x3C, 0x4D, 0x78, 0x35, 0x1C, 0x3F, 0x9C, 0x58, 0x5E, 0xD4, 
0x22, 0x43, 0x5D, 0x69, 0xC4, 0xA4, 0x81, 0x4D, 0x4D, 0xE4, 0xB0, 0x81, 0x10, 0x79, 0x50, 0xF0, 
0x71, 0x7A, 0x68, 0x84, 0x96, 0xFB, 0x17, 0xEA, 0x9D, 0x8A, 0xFD, 0x90, 0xD1, 0x46, 0x5F, 0x4D, 
0x28, 0xA5, 0x93, 0x33, 0x80, 0x93, 0xB9, 0x0D, 0xF2, 0x44, 0xD5, 0x27, 0x9B, 0x4F, 0xE5, 0x6E, 
0x05, 0x6A, 0x0C, 0x31, 0xB6, 0x12, 0x4C, 0xBC, 0x94, 0xBD, 0x8C, 0x49, 0x83, 0x3A, 0xE5, 0x79, 
0xEB, 0x8F, 0x19, 0x01, 0xE7, 0xB2, 0x75, 0xFD, 0x76, 0xC1, 0x64, 0x8F, 0x39, 0x06, 0xF1, 0xBF, 
0x6D, 0x1D, 0xE8, 0xDA, 0x87, 0xB5, 0x80, 0xAB, 0x15, 0x9D, 0x3E, 0x15, 0xC4, 0x37, 0x15, 0xAE, 
0xF9, 0xBD, 0xD7, 0x40, 0x13, 0xD5, 0x24, 0x27, 0xDA, 0xCD, 0x64, 0x5D, 0x10, 0xA9, 0x5F, 0x35, 
0x70, 0xC3, 0x65, 0x48, 0xB9, 0x83, 0x3A, 0x6F, 0x0C, 0x03, 0xD6, 0xC0, 0x0B, 0xF6, 0xF9, 0x3A, 
0xCC, 0x35, 0x33, 0x03, 0xB0, 0x22, 0xCF, 0xB5, 0xBB, 0xEE, 0xC7, 0xFF, 0x60, 0x06, 0x47, 0x6A, 
0x76, 0x7E, 0xDB, 0xA0, 0xAC, 0x5F, 0xA7, 0x6F, 0x68, 0x14, 0x71, 0x54, 0xA3, 0xE0, 0x94, 0xBD, 
0x0E, 0xA6, 0x3D, 0xBD, 0x22, 0x14, 0x2A, 0x45, 0x3D, 0x87, 0x22, 0xD2, 0x00, 0x54, 0x6F, 0xC9, 
0x28, 0x92, 0x74, 0xF7, 0xE9, 0xF8, 0x2C, 0x4F, 0x2A, 0x29, 0x79, 0x1C, 0xB6, 0xF8, 0xFC, 0x60, 
0x36, 0xA6, 0x78, 0x17, 0x03, 0x63, 0xB7, 0x42, 0x21, 0x12, 0xD6, 0x3B, 0x32, 0x52, 0x75, 0xED, 
0xF7, 0x37, 0xF1, 0xD5, 0x07, 0x50, 0xB6, 0x08, 0x91, 0xF3, 0xBD, 0xDA, 0x23, 0x88, 0x75, 0x79, 
0x92, 0x32, 0xF6, 0xD0, 0x15, 0x3A, 0x70, 0xD8, 0x45, 0xF0, 0xD6, 0x48, 0xAC, 0xDB, 0x69, 0x44, 
0x61, 0x3E, 0x10, 0xA9, 0x53, 0x5C, 0x59, 0x86, 0x8E, 0x1D, 0x08, 0x56, 0x7B, 0xE9, 0x8E, 0x39, 
0xB8, 0xBB, 0x21, 0xCB, 0x35, 0x7E, 0x74, 0x02, 0x34, 0x01, 0xC5, 0x3F, 0x5A, 0xA2, 0x8F, 0xB5, 
0x73, 0xFE, 0xDE, 0xC0, 0x35, 0xD2, 0x72, 0xC1, 0xCA, 0xF8, 0x9A, 0xD4, 0xC6, 0xCF, 0xE6, 0xC6, 
0xE8, 0xC6, 0xE0, 0x8A, 0x53, 0xFB, 0x4D, 0x81, 0x8A, 0x18, 0xC5, 0xD6, 0x0E, 0x69, 0x6D, 0x27, 
0x57, 0x44, 0x7F, 0x55, 0x56, 0xE4, 0x56, 0xD7, 0xAF, 0x4A, 0x72, 0xA6, 0x3F, 0xDA, 0xD3, 0xF4, 
0x3F, 0x06, 0xFC, 0x82, 0x37, 0x12, 0x17, 0x52, 0xEA, 0x73, 0xA2, 0xDA, 0x88, 0xC3, 0xD1, 0x72, 
0x2E, 0xB0, 0x02, 0xC9, 0x46, 0xFE, 0xE0, 0xE1, 0x89, 0xE0, 0x44, 0x1D, 0x62, 0x91, 0x95, 0x23, 
0xB4, 0x19, 0x77, 0x0E, 0x4E, 0x1E, 0x31, 0x35, 0xDB, 0x08, 0xD4, 0x1A, 0x04, 0xED, 0xC2, 0x0E, 
0xB2, 0x9D, 0xD5, 0x73, 0x86, 0x22, 0xEE, 0x9A, 0xAB, 0x9B, 0xEE, 0x54, 0xF3, 0x4D, 0x80, 0xD8, 
0x3E, 0x21, 0xEA, 0x99, 0x64, 0x63, 0x34, 0x9E, 0xA8, 0x60, 0xF4, 0x56, 0x7E, 0x3F, 0x17, 0xFB, 
0x91, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x53, 0x30, 0x51, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 
0x0E, 0x04, 0x16, 0x04, 0x14, 0xA8, 0x35, 0x74, 0x38, 0x37, 0x51, 0x63, 0x9A, 0x39, 0xC5, 0x20, 
0x54, 0xA1, 0xD4, 0x85, 0x2A, 0x26, 0xB1, 0x9F, 0x9F, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x1D, 0x23, 
0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xA8, 0x35, 0x74, 0x38, 0x37, 0x51, 0x63, 0x9A, 0x39, 0xC5, 
0x20, 0x54, 0xA1, 0xD4, 0x85, 0x2A, 0x26, 0xB1, 0x9F, 0x9F, 0x30, 0x0F, 0x06, 0x03, 0x55, 0x1D, 
0x13, 0x01, 0x01, 0xFF, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xFF, 0x30, 0x0D, 0x06, 0x09, 0x2A, 
0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x03, 0x82, 0x02, 0x01, 0x00, 0x71, 
0x78, 0x43, 0xB7, 0x59, 0x99, 0x49, 0xC7, 0x29, 0x21, 0xA3, 0x16, 0x71, 0x9F, 0x37, 0xA2, 0xF4, 
0x82, 0xEB, 0xC7, 0x6A, 0x78, 0x13, 0x48, 0xBA, 0xC3, 0x68, 0xF6, 0x6A, 0x9B, 0x87, 0x4F, 0x6B, 
0x2B, 0xDF, 0x8B, 0xBD, 0x11, 0xDC, 0x79, 0xFF, 0x7B, 0x4A, 0xFF, 0x65, 0x6B, 0x68, 0xC8, 0xE4, 
0xCE, 0xB4, 0x92, 0x19, 0xB1, 0x43, 0x2B, 0x62, 0x4F, 0xC3, 0xDD, 0xA5, 0xD4, 0x23, 0x21, 0x89, 
0x0B, 0xD2, 0x33, 0x31, 0x9A, 0xE8, 0x9F, 0x36, 0x58, 0xCA, 0xB3, 0x00, 0x27, 0xF1, 0x9B, 0x29, 
0xA0, 0xDB, 0xA7, 0x2C, 0xA6, 0x5C, 0x32, 0x7A, 0x3C, 0x7E, 0x65, 0x73, 0x42, 0xF4, 0x18, 0x46, 
0xAA, 0x52, 0xE9, 0x5B, 0xC1, 0xA0, 0x9B, 0x7D, 0x2B, 0xE3, 0x11, 0x57, 0x2B, 0xE8, 0x76, 0x79, 
0x51, 0xCD, 0xC4, 0x1E, 0x50, 0xA6, 0xD8, 0xED, 0x5E, 0x6D, 0x0A, 0x5B, 0x25, 0x9F, 0xF6, 0xCD, 
0x90, 0x19, 0x85, 0x64, 0x90, 0xE2, 0x7E, 0xE8, 0x32, 0xF7, 0xE7, 0x34, 0xCD, 0x4C, 0x51, 0x68, 
0x31, 0xAB, 0x04, 0x6C, 0x31, 0x34, 0xBB, 0xA5, 0x83, 0xF4, 0x93, 0x40, 0xDB, 0x31, 0xA9, 0x33, 
0xA6, 0x22, 0xB3, 0xEE, 0xFD, 0x87, 0x0B, 0x9D, 0xE5, 0x06, 0x02, 0x62, 0x89, 0x32, 0x49, 0x27, 
0x8C, 0x29, 0xD1, 0xF7, 0xAC, 0x6F, 0xBB, 0x28, 0x92, 0x93, 0x13, 0x94, 0x46, 0x8A, 0x11, 0xF1, 
0x00, 0x3C, 0xA3, 0x7E, 0x25, 0x1B, 0x79, 0x1D, 0xC8, 0x0A, 0x2F, 0xCB, 0xA5, 0xB5, 0xD2, 0x81, 
0xDC, 0xEF, 0x8B, 0xBC, 0x09, 0x1A, 0x3C, 0xE0, 0x54, 0x39, 0x0E, 0xBB, 0xC1, 0xDB, 0x9E, 0xA4, 
0xF6, 0x33, 0xB5, 0x12, 0x67, 0x43, 0xD9, 0x3C, 0x25, 0xBB, 0x29, 0x86, 0xE4, 0x52, 0x00, 0xFF, 
0x8A, 0xA6, 0x67, 0x47, 0x10, 0x62, 0x59, 0xE3, 0xD6, 0x5D, 0xA5, 0x5B, 0x49, 0xB1, 0x6F, 0x3C, 
0x1E, 0x40, 0x00, 0x8F, 0x9F, 0x15, 0x66, 0xFE, 0xA2, 0x3B, 0xF0, 0x99, 0xC5, 0x19, 0xA6, 0xF2, 
0x9F, 0x8F, 0x9C, 0x71, 0xE9, 0xE8, 0xA7, 0xE3, 0x30, 0xC0, 0x95, 0xC8, 0x00, 0x6F, 0x5C, 0x90, 
0x01, 0xFF, 0xC1, 0x32, 0x3D, 0x53, 0x49, 0xE8, 0x73, 0x13, 0xC4, 0xD1, 0x43, 0xD1, 0x2B, 0xAF, 
0x27, 0xA2, 0xFE, 0x51, 0x8A, 0xAD, 0x58, 0x3A, 0x16, 0xFD, 0xA2, 0x55, 0xDC, 0xDA, 0x06, 0x37, 
0x3E, 0x47, 0x50, 0x3D, 0x27, 0xFC, 0x6F, 0x77, 0xE5, 0x6A, 0xB2, 0x0E, 0x91, 0x8B, 0x92, 0x79, 
0xFF, 0x80, 0xC7, 0xDB, 0x24, 0x45, 0xB4, 0x73, 0x8E, 0xB9, 0x10, 0x36, 0x91, 0x33, 0xD2, 0xE1, 
0xA2, 0x50, 0x4E, 0xB5, 0xC1, 0x3D, 0x24, 0x3B, 0x7F, 0x7A, 0x5E, 0x64, 0x65, 0x85, 0xB0, 0x2C, 
0x40, 0xD1, 0xB2, 0x62, 0xF5, 0x25, 0xEE, 0xE8, 0x8A, 0xC2, 0xC0, 0xC9, 0xE4, 0x39, 0x45, 0xD1, 
0x1B, 0x81, 0x3A, 0x21, 0x62, 0xB0, 0xED, 0x6D, 0xDC, 0x6A, 0xEB, 0x82, 0x9D, 0xB1, 0xA1, 0x74, 
0x77, 0x65, 0x99, 0xF8, 0xD4, 0xC5, 0xEC, 0xCB, 0x5A, 0x12, 0xB3, 0x7F, 0xE1, 0x63, 0x94, 0xCC, 
0x64, 0x34, 0x09, 0x21, 0xDE, 0xC1, 0x77, 0x21, 0x2A, 0x48, 0x70, 0xDB, 0x3B, 0x21, 0x76, 0xD0, 
0x2A, 0x64, 0x03, 0xE6, 0x88, 0x96, 0x3B, 0xD7, 0xD6, 0xC5, 0x86, 0x0F, 0xE1, 0xE4, 0xA6, 0x43, 
0x8B, 0xD0, 0xB3, 0xB5, 0xCE, 0xCA, 0x3A, 0xC3, 0x25, 0xB0, 0xA4, 0xC7, 0xA9, 0x0D, 0x94, 0x83, 
0x73, 0xBA, 0x6B, 0x44, 0x1F, 0xD0, 0x99, 0x55, 0xDC, 0xE6, 0x70, 0xEA, 0x91, 0x7C, 0xE9, 0xCF, 
0x94, 0x40, 0x4C, 0x7E, 0xA9, 0x4F, 0x3C, 0xDB, 0xC4, 0xDD, 0x80, 0xAE, 0x9F, 0xCC, 0xE8, 0xC7, 
0x0B, 0xB6, 0x52, 0x90, 0x83, 0x54, 0x57, 0x6D, 0x93, 0x8B, 0x29, 0x04, 0x42, 0x38, 0x43
};

// MU_CHANGE END

#pragma pack ()


//
// A structure that collects the values of UEFI variables related to Secure
// Boot.
//
typedef struct {
  UINT8 SetupMode;
  UINT8 SecureBoot;
  UINT8 SecureBootEnable;
  UINT8 CustomMode;
  UINT8 VendorKeys;
} SETTINGS;


//
// Refer to "AuthData.c" for details on the following objects.
//
extern CONST UINT8 mMicrosoftKek[];
extern CONST UINTN mSizeOfMicrosoftKek;

extern CONST UINT8 mMicrosoftPca[];
extern CONST UINTN mSizeOfMicrosoftPca;

extern CONST UINT8 mMicrosoftUefiCa[];
extern CONST UINTN mSizeOfMicrosoftUefiCa;

extern CONST UINT8 mSha256OfDevNull[];
extern CONST UINTN mSizeOfSha256OfDevNull;

// MU_CHANGE START
extern CONST UINT8 mSha256OfTestApp[];
extern CONST UINTN mSizeOfSha256OfTestApp;

extern CONST UINT8 mVersionRecordCertPayload[];
extern CONST UINTN mSizeOfVersionRecordCertPayload;
// MU_CHANGE END

#endif /* ENROLL_DEFAULT_KEYS_H_ */
